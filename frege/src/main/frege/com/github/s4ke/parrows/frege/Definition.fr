{-
The MIT License (MIT)

Copyright (c) 2016 Martin Braun

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-}
{-# LANGUAGE MultiParamTypeClasses, FlexibleContexts #-}
package com.github.s4ke.parrows.frege.Definition where

import frege.Prelude

import frege.control.Arrow
import frege.control.Category
import frege.control.Semigroupoid
import frege.control.First
import frege.control.Second
import frege.control.CombineIn
import frege.control.Tensor

import com.github.s4ke.parrows.frege.ArrowExt
import com.github.s4ke.parrows.frege.ArrowUtils

import Control.DeepSeq

import Data.Monoid
import Data.Maybe
import Data.List

import frege.lib.ForkJoin

class (Arrow arr) => ArrowParallel arr where
    parEvalN :: [arr a b] -> arr [a] [b]

instance ArrowParallel (->) where
    parEvalN (f:fs) (x:xs) = parOp (:) (f x) (parEvalN fs xs)
    parEvalN [] [] = []
    parEvalN _ _ = error "length of fs did not match length of list xs"

{-
-- parallel versions of (***) and (&&&)

(|***|) :: (ArrowParallel arr a b (), ArrowParallel arr (Maybe a, Maybe c) (Maybe b, Maybe d) (), ArrowApply arr) => arr a b -> arr c d -> arr (a, c) (b, d)
(|***|) = parEval2 ()

(|&&&|) :: (ArrowParallel arr a b (), ArrowParallel arr (Maybe a, Maybe a) (Maybe b, Maybe c) (), ArrowApply arr) => arr a b -> arr a c -> arr a (b, c)
(|&&&|) f g = (arr $ \a -> (a, a)) >>> f |***| g

(|>>>|) :: (Arrow arr) => [arr a b] -> [arr b c] -> [arr a c]
(|>>>|) = zipWith (>>>)
-}


{-

-- spawns the first n arrows to be evaluated in parallel. this works for infinite lists of arrows as well
parEvalNLazy :: (ArrowParallel arr a b conf, ArrowChoice arr, ArrowApply arr) => conf  -> ChunkSize -> [arr a b] -> (arr [a] [b])
parEvalNLazy conf chunkSize fs =
               -- chunk the functions, feed the function chunks into parEvalN, chunk the input accordingly
               -- evaluate the function chunks in parallel and concat the input to a single list again
               arr (chunksOf chunkSize) >>>
               listApp fchunks >>>
               arr concat
               where
                fchunks = map (parEvalN conf) $ chunksOf chunkSize fs

-- evaluate two functions with different types in parallel
parEval2 :: (ArrowParallel arr a b conf, ArrowParallel arr (Maybe a, Maybe c) (Maybe b, Maybe d) conf, ArrowApply arr) => conf -> arr a b -> arr c d -> (arr (a, c) (b, d))
parEval2 conf f g = -- lift the functions to "maybe evaluated" functions
           -- so that if they are passed a Nothing they don't compute anything
           -- then, make a list of two of these functions evaluated after each other,
           -- feed each function the real value and one Nothing for the function they don't have to compute
           -- and combine them back to a tuple
           (arr $ \(a, c) -> (f_g, [(Just a, Nothing), (Nothing, Just c)])) >>>
           app >>>
           (arr $ \comb -> (fromJust (fst (comb !! 0)), fromJust (snd (comb !! 1))))
           where
               f_g = parEvalN conf $ replicate 2 $ arrMaybe f *** arrMaybe g
               arrMaybe :: (ArrowApply arr) => (arr a b) -> arr (Maybe a) (Maybe b)
               arrMaybe fn = (arr $ go) >>> app
                   where go Nothing = (arr $ \Nothing -> Nothing, Nothing)
                         go (Just a) = ((arr $ \(Just x) -> (fn, x)) >>> app >>> arr Just, (Just a))

-- some skeletons

parMap :: (ArrowParallel arr a b conf, ArrowApply arr) => conf -> (arr a b) -> (arr [a] [b])
parMap conf f = (arr $ \as -> (f, as)) >>>
                (first $ arr repeat >>> arr (parEvalN conf)) >>>
                app

-- contrary to parMap this schedules chunks of a given size (parMap has "chunks" of length = 1) to be
-- evaluated on the same thread
parMapStream :: (ArrowParallel arr a b conf, ArrowChoice arr, ArrowApply arr) => conf -> ChunkSize -> arr a b -> arr [a] [b]
parMapStream conf chunkSize f = (arr $ \as -> (f, as)) >>>
                                (first $ arr repeat >>> arr (parEvalNLazy conf chunkSize)) >>>
                                app

-- similar to parMapStream, but divides the input list by the given number
farm :: (ArrowParallel arr a b conf, ArrowParallel arr [a] [b] conf, ArrowChoice arr, ArrowApply arr) => conf -> NumCores -> arr a b -> arr [a] [b]
farm conf numCores f =
                (arr $ \as -> (f, as)) >>>
                (first $ arr mapArr >>> arr repeat >>> arr (parEvalN conf)) >>>
                (second $ arr (unshuffle numCores)) >>>
                app >>>
                arr shuffle

-- farmChunk and parMapStream combined. divide the input list and inside work in chunks
farmChunk :: (ArrowParallel arr a b conf, ArrowParallel arr [a] [b] conf, ArrowChoice arr, ArrowApply arr) => conf -> ChunkSize -> NumCores -> arr a b -> arr [a] [b]
farmChunk conf chunkSize numCores f =
                                 (arr $ \as -> (f, as)) >>>
                                 (first $ arr mapArr >>> arr repeat >>> arr (parEvalNLazy conf chunkSize)) >>>
                                 (second $ arr (unshuffle numCores)) >>>
                                 app >>>
                                 arr shuffle

-- okay. (from: https://hackage.haskell.org/package/edenskel-2.1.0.0/docs/src/Control-Parallel-Eden-Auxiliary.html#unshuffle)
unshuffle :: Int      -- ^number of sublists
             -> [a]   -- ^input list
             -> [[a]] -- ^distributed output
unshuffle n xs = [takeEach n (drop i xs) | i <- [0..n-1]]

takeEach :: Int -> [a] -> [a]
takeEach n [] = []
takeEach n (x:xs) = x : takeEach n (drop (n-1) xs)


-- | Simple shuffling - inverse to round robin distribution
shuffle :: [[a]]  -- ^ sublists
           -> [a] -- ^ shuffled sublists
shuffle = concat . transpose
-}