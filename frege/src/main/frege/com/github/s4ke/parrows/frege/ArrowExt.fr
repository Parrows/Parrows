package com.github.s4ke.parrows.frege.ArrowExt where

import frege.control.Arrow
import frege.control.Category
import frege.control.Semigroupoid
import frege.control.First
import frege.control.Second
import frege.control.CombineIn
import frege.control.Tensor

import frege.control.arrow.Kleisli

-- start code copied from https://github.com/Frege/frege/blob/master/contrib/dgronau/arrow/Arrow.fr

class Arrow a => ArrowChoice a where

    -- | Feed marked inputs through the argument arrow, passing the
    --   rest through unchanged to the output.
    left :: a b c -> a (Either b d) (Either c d)

    -- | A mirror image of 'left'.
    --
    --   The default definition may be overridden with a more efficient
    --   version if desired.
    right :: a b c -> a (Either d b) (Either d c)
    right f = arr mirror >>> left f >>> arr mirror
      where
        mirror :: Either x y -> Either y x
        mirror (Left x) = Right x
        mirror (Right y) = Left y

    -- | Split the input between the two argument arrows, retagging
    --   and merging their outputs.
    --   Note that this is in general not a functor.
    --
    --   The default definition may be overridden with a more efficient
    --   version if desired.
    (+++) :: a b c -> a b' c' -> a (Either b b') (Either c c')
    f +++ g = left f >>> right g

    -- | Fanin: Split the input between the two argument arrows and
    --   merge their outputs.
    --
    --   The default definition may be overridden with a more efficient
    --   version if desired.
    (|||) :: a b d -> a c d -> a (Either b c) d
    f ||| g = f +++ g >>> arr untag
      where
        untag (Left x) = x
        untag (Right y) = y

instance (Monad m) => ArrowChoice (Kleisli m) where
    left f = f +++ arr id
    right f = arr id +++ f
    f +++ g = (f >>> arr Left) ||| (g >>> arr Right)
    Kleisli f ||| Kleisli g = Kleisli (either f g)

instance ArrowChoice (->) where
    left f = f +++ id
    right f = id +++ f
    f +++ g = (Left . f) ||| (Right . g)
    (|||) = either
-- end code from https://github.com/Frege/frege/blob/master/contrib/dgronau/arrow/Arrow.fr

-- This workaround is needed
-- because of the compiler error described in:
-- https://github.com/Frege/frege/issues/323
data ArrowApply' a b c = AA { app :: a (a b c, b) c }

class Arrow a => ArrowApply a where
    app' :: ArrowApply' a b c

instance ArrowApply (->) where
    app' = AA { app = xapp }
       where xapp (f, b) = f b

instance (Monad m) => ArrowApply (Kleisli m) where
    app' = AA { app = xapp }
       where xapp = Kleisli (\(Kleisli f, x) -> f x)

app :: ArrowApply a => a (a b c, b) c
app = app'.app